---
name: Reusable workflow to test packages in S3 bucket
on:
  workflow_call:
    inputs:
      environment:
        description: The Github environment to run this workflow on.
        type: string
        required: false
    secrets:
      token:
        description: The Github token or similar to authenticate with.
        required: true
      bucket:
        description: The name of the S3 (US-East) bucket to pull packages from.
        required: true

jobs:
  call-test-packaging:
    # We use Dokken to run a series of test suites locally on containers representing
    # each OS we want to install on. This creates custom images with the package
    # installed and configured as per our documentation then verifies that the agent
    # is running at startup.
    name: ${{ matrix.distro }} package tests
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
        AWS_URL: https://${{ secrets.bucket }}.s3.amazonaws.com
    strategy:
      fail-fast: false
      matrix:
        distro: [ amazonlinux2, centos7, centos8, debian10, debian11, ubuntu1804, ubuntu2004 ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get the version
      id: get_version
      run: |
        curl --fail -LO "$AWS_URL/latest-version.txt"
        VERSION=$(cat latest-version.txt)
        echo ::set-output name=VERSION::$VERSION
      shell: bash

    - name: Run package installation tests
      run: |
        packaging/testing/smoke/packages/run-package-tests.sh
      env:
        PACKAGE_TEST: ${{ matrix.distro }}
        RELEASE_URL: https://packages.fluentbit.io

  call-test-windows-packaging:
    name: Windows package tests
    runs-on: windows-latest
    environment: ${{ inputs.environment }}

    steps:
    - name: Get the version
      id: get_version
      run: |
        curl --fail -LO "$AWS_URL/latest-version.txt"
        VERSION=$(cat latest-version.txt)
        echo ::set-output name=VERSION::$VERSION
      shell: bash

    - name: Info
      run: $PSVersionTable.PSVersion
      shell: pwsh

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download packages locally
      run: |
        Invoke-WebRequest -Uri $Env:EXE_SOURCE -OutFile fluent-bit-installer.exe
        Invoke-WebRequest -Uri $Env:ZIP_SOURCE -OutFile fluent-bit.zip
      shell: pwsh
      env:
        # https://ci.appveyor.com/api/projects/fluent/fluent-bit/artifacts/bin/debug.zip?branch=master
        EXE_SOURCE: https://fluentbit.io/releases/1.8/td-agent-bit-1.8.11-win64.exe
        ZIP_SOURCE: https://fluentbit.io/releases/1.8/td-agent-bit-1.8.11-win64.zip

    - name: Extract zip locally to test
      # Will end up in .\fluent-bit\td-agent-bit-<version>-win64\
      run: |
        Expand-Archive -PassThru -Force -Path "fluent-bit.zip"
      shell: pwsh

    - name: Run zip version with simple config
      timeout-minutes: 1
      run: |
        $fluentbit=Start-Process -PassThru -NoNewWindow -FilePath "bin\fluent-bit.exe" -ArgumentList "-i", "dummy", "-o", "stdout"
        Start-Sleep -s 15
        if ($fluentbit.HasExited) {
          Write-Host "Fluent Bit exited prematurely"
          exit 1
        }
        Stop-Process -Force -InputObject $fluentbit
        Get-Process | Where-Object {$_.HasExited}
        Write-Host "Fluent Bit exited correctly"
      shell: pwsh
      working-directory: fluent-bit\td-agent-bit-1.8.11-win64

    - name: Run executable installer
      timeout-minutes: 5
      # Silent install accepting all defaults
      run: |
        Start-Process -NoNewWindow -FilePath "fluent-bit-installer.exe" -ArgumentList "/S", "/D=C:\fluent-bit"
      shell: pwsh

    - name: Verify installation
      timeout-minutes: 1
      run: |
        Test-Path -Path "C:\fluent-bit\bin\fluent-bit.exe"
        Test-Path -Path "C:\fluent-bit\conf\fluent-bit.conf"
        Test-Path -Path "C:\fluent-bit\conf\parsers.conf"
        Test-Path -Path "C:\fluent-bit\conf\plugins.conf"
      shell: pwsh

    - name: Patch config
      # Default config prior to 1.9 is for Linux so will fail
      # Only for 1.8 or earlier
      run: |
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/fluent/fluent-bit/master/conf/fluent-bit-win32.conf -OutFile "conf\fluent-bit.conf"
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/fluent/fluent-bit/master/conf/fluent-bit-win32.conf -OutFile "C:\fluent-bit\conf\fluent-bit.conf"
      shell: pwsh
      working-directory: fluent-bit\td-agent-bit-1.8.11-win64

    - name: Run zip version with default config
      timeout-minutes: 1
      run: |
        $fluentbit=Start-Process -PassThru -NoNewWindow -FilePath "bin\fluent-bit.exe" -ArgumentList "-c", "conf\fluent-bit.conf"
        Start-Sleep -s 15
        if ($fluentbit.HasExited) {
          Write-Host "Fluent Bit exited prematurely"
          exit 1
        }
        Stop-Process -Force -InputObject $fluentbit
        Get-Process | Where-Object {$_.HasExited}
        Write-Host "Fluent Bit exited correctly"
      shell: pwsh
      working-directory: fluent-bit\td-agent-bit-1.8.11-win64

    - name: Run the installed version with default config
      timeout-minutes: 1
      run: |
        $fluentbit=Start-Process -PassThru -NoNewWindow -FilePath "bin\fluent-bit.exe" -ArgumentList "-c", "conf\fluent-bit.conf"
        Start-Sleep -s 15
        if ($fluentbit.HasExited) {
          Write-Host "Fluent Bit exited prematurely"
          exit 1
        }
        Stop-Process -Force -InputObject $fluentbit
        Get-Process | Where-Object {$_.HasExited}
        Write-Host "Fluent Bit exited correctly"
      shell: pwsh
      working-directory: C:\fluent-bit

    - name: Create a Fluent Bit service
      timeout-minutes: 1
      run: |
        New-Service fluent-bit -BinaryPathName "C:\fluent-bit\bin\fluent-bit.exe -c C:\fluent-bit\conf\fluent-bit.conf" -StartupType Manual
      shell: pwsh

    - name: Verify we have the new service
      run: |
        Get-Service -Name fluent-bit
      shell: pwsh

    - name: Start the service and check it runs
      timeout-minutes: 2
      run: |
        Start-Service fluent-bit
        Start-Sleep -s 60
        $service = Get-Service -Name fluent-bit
        if( $service.Status -ne 'Running' ) {
          Write-Host 'Service is not Running'
          exit 1
        }
        Write-Host 'Service is Running'
      shell: pwsh

