---
name: Unstable build

on:
  workflow_dispatch:

  # Run nightly build at this time, bit of trial and error but this seems good.
  schedule:
  - cron: "0 6 * * *"

# We do not want a new unstable build to run whilst we are releasing the current unstable build.
concurrency: unstable-build-release

jobs:

  # This job strips off the `v` at the start of any tag provided.
  # It then provides this metadata for the other jobs to use.
  unstable-build-get-meta:
    name: Get metadata to add to build
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.date.outputs.date }}
    steps:
      # For cron builds, i.e. nightly, we provide date and time as extra parameter to distinguish them.
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date '+%Y-%m-%d-%H_%M_%S')"

  unstable-build-images-master:
    needs: unstable-build-get-meta
    uses: fluent/fluent-bit/.github/workflows/call-build-images.yaml@master
    with:
      ref: master
      registry: ghcr.io
      username: ${{ github.actor }}
      image: ${{ github.repository }}/unstable
      environment: unstable
      unstable: ${{ needs.unstable-build-get-meta.outputs.date }}
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}

  unstable-build-generate-matrix:
    name: unstable build matrix
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # Set up the list of target to build so we can pass the JSON to the reusable job
      - uses: ./.github/actions/release-server-sync
        id: set-matrix

  unstable-build-packages-master:
    needs: [ unstable-build-get-meta, unstable-build-generate-matrix ]
    uses: fluent/fluent-bit/.github/workflows/call-build-packages.yaml@master
    with:
      version: master
      ref: master
      build_matrix: ${{ needs.unstable-build-generate-matrix.outputs.build-matrix }}
      environment: unstable
      unstable: ${{ needs.unstable-build-get-meta.outputs.date }}
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}

  # We already detain all artefacts as build output so just capture for an unstable release
  unstable-release-master:
    runs-on: ubuntu-latest
    needs:
      - unstable-build-get-meta
      - unstable-build-images-master
      - unstable-build-packages-master
    environment: unstable
    permissions:
      contents: write
    steps:
      - name: Download all artefacts
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          path: artifacts/

      - name: Single packages tar
        run: |
          mkdir -p release-upload
          tar -czvf release-upload/packages-unstable-master.tar.gz -C artifacts/ .
        shell: bash

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull containers as well (single arch only)
        # May not be any/valid so ignore errors
        continue-on-error: true
        run: |
          docker pull ghcr.io/${{ github.repository }}/unstable:master
          docker save --output container-master.tar ghcr.io/${{ github.repository }}/unstable:master
          docker pull ghcr.io/${{ github.repository }}/unstable:master-debug
          docker save --output container-master-debug.tar ghcr.io/${{ github.repository }}/unstable:master-debug
        shell: bash
        working-directory: release-upload

      - name: Display structure of files to upload
        run: ls -R
        working-directory: release-upload
        shell: bash

      - name: Remove any existing release
        continue-on-error: true
        run: gh release delete unstable-master --yes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Create Release
        run: gh release create unstable-master *.tar* --generate-notes --prerelease --target master --title "Nightly unstable master build"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        working-directory: release-upload
